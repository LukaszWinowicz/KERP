@using KERP.Application.Services
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ICurrentUserService CurrentUserService

<FluentHeader>
     KERP QA
    <AuthorizeView>
        <Authorized>           
            @CurrentUserService.FactoryId           
        </Authorized>
    </AuthorizeView>

    <FluentSpacer />
    <AuthorizeView>
        <Authorized>
            <div class="centered-badge">
                <FluentCounterBadge BackgroundColor="@Color.Error"
                                    Color="Color.Fill"                                  
                                    ShowCount="false">
                    <FluentIcon Value="@(new Icons.Regular.Size24.Alert())"
                                Color="@Color.Fill"
                                Class="alert-icon"
                                />
                </FluentCounterBadge>
            </div>
            <FluentSpacer Width="15" />
                <form method="post" action="/Account/Logout">

                <FluentProfileMenu Initials="@GenerateInitials(Username)"
                                   FullName="@Username"
                                   EMail="@Email"
                                   OnHeaderButtonClick="@SignOutAsync">
                    <FooterTemplate>
                        <div style="text-align: center;">
                            @if (!string.IsNullOrEmpty(CurrentUserService.FactoryName))
                            {
                                <FluentDivider Style="margin: 10px 0;" />
                                <div style="color: black; font-size: 12px;">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Building())" Style="vertical-align: middle;" />
                                    @CurrentUserService.FactoryName
                                </div>
                            }
                        </div>
                        <FluentStack></FluentStack>
                    </FooterTemplate>
                </FluentProfileMenu>
            </form>
        </Authorized>
    </AuthorizeView>
</FluentHeader>

<style>
    .alert-icon {
        cursor: pointer;
    }

        .alert-icon:hover {
            transform: scale(1.1);
        }

        .alert-icon:active {
            transform: scale(0.95);
        }

    .centered-badge {
        display: flex;
        align-items: center;
        height: 60%;
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private string Username { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            // Używamy CurrentUserService zamiast bezpośrednio claims
            Username = CurrentUserService.Username ?? string.Empty;
            Email = CurrentUserService.Email ?? string.Empty;
        }
    }

    /// <summary>
    /// Obsługa zmian w notyfikacjach - odświeża komponent
    /// </summary>
    private void HandleNotificationsChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void SignOutAsync()
    {
        NavigationManager.NavigateTo("/Account/Logout", forceLoad: true);

    }

    private string GenerateInitials(string username)
    {
        if (string.IsNullOrEmpty(username)) return "NA";

        var parts = username.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            // Pierwsze litery imienia i nazwiska
            return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
        }

        // Jeśli tylko jedno słowo, weź pierwsze dwie litery
        return username.Length >= 2
            ? username.Substring(0, 2).ToUpper()
            : username.ToUpper();
    }
}