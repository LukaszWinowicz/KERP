@page "/mass-update/purchase-order/receipt-date"
@using KERP.Application.Common.Abstractions.CQRS
@using KERP.Application.Common.Abstractions.MassUpdate.PurchaseOrder.ReceiptDate
@using KERP.Application.Common.Models
@using KERP.BlazorUI.Components.Shared
@using KERP.BlazorUI.Components.Shared.DataContainer
@using KERP.Domain.Aggregates.MassUpdate.PurchaseOrder
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

@inject IMediator Mediator
@inject IToastService ToastService
@inject IDialogService DialogService

<PageTitle>Mass Update - Receipt Date</PageTitle>

<h3>Batch Update Purchase Order Receipt Date</h3>
<p>Add multiple rows and submit all at once.</p>

<DataContainer>
    
    <!-- HEADER: Date Type + Buttons -->
    <HeaderContent>
        <FluentSelect TOption="string" 
                      @bind-Value="_commonDateType" 
                      Label="Date Type"
                      Style="width: 200px;">
            <FluentOption Value="@nameof(DateType.Confirmed)">Confirmed</FluentOption>
            <FluentOption Value="@nameof(DateType.Changed)">Changed</FluentOption>
        </FluentSelect>

        <FluentSpacer />

        <FluentButton Appearance="Appearance.Outline" 
                      Type="ButtonType.Button"
                      OnClick="AddNewRow"
                      IconStart="@(new Icons.Regular.Size20.Add())">
            Add Row
        </FluentButton>

        <FluentButton Appearance="Appearance.Outline" 
                      Type="ButtonType.Button"
                      Disabled="true"
                      IconStart="@(new Icons.Regular.Size20.ClipboardPaste())">
            Paste
        </FluentButton>

        <FluentButton Appearance="Appearance.Outline" 
                      Type="ButtonType.Button"
                      OnClick="ClearAllAsync"
                      IconStart="@(new Icons.Regular.Size20.Delete())">
            Clear All
        </FluentButton>
    </HeaderContent>

    <!-- COLUMN HEADERS -->
    <ColumnHeaders>
        <div style="width: 200px;">Purchase Order</div>
        <div style="width: 100px;">Line</div>
        <div style="width: 100px;">Seq</div>
        <div style="width: 200px;">Receipt Date</div>
        <div style="width: 50px;"></div>
    </ColumnHeaders>

    <!-- DATA ROWS -->
    <ChildContent>
        <!-- Błędy globalne -->
        @if (_globalErrors.Any())
        {
            <FluentMessageBar Intent="MessageIntent.Error" 
                              Title="Validation Error"
                              Style="margin-bottom: 10px;">
                <ul style="margin: 0; padding-left: 20px;">
                    @foreach (var error in _globalErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </FluentMessageBar>
        }

        <!-- Wiersze danych -->
        @for (int i = 0; i < _rows.Count; i++)
        {
            var rowIndex = i;
            var row = _rows[rowIndex];

            <div style="margin-bottom: 10px;">
                <div style="display: flex; gap: 10px; align-items: center; padding: 10px; border: 1px solid var(--neutral-stroke-rest); border-radius: 4px;">
                    
                    <FluentTextField @bind-Value="row.PurchaseOrderNumber" 
                                     Placeholder="9 digits"
                                     Style="width: 200px;" />

                    <FluentNumberField @bind-Value="row.LineNumber" 
                                       Min="1"
                                       Style="width: 100px;" />

                    <FluentNumberField @bind-Value="row.Sequence" 
                                       Min="1"
                                       Style="width: 100px;" />

                    <FluentDatePicker @bind-Value="row.ReceiptDate"
                                      Style="width: 200px;" />

                    <FluentButton Appearance="Appearance.Outline" 
                                  IconStart="@(new Icons.Regular.Size20.Delete())"
                                  OnClick="() => RemoveRow(rowIndex)"
                                  Style="width: 40px; height: 32px;" />
                </div>

                @if (row.Errors.Any())
                {
                    <FluentMessageBar Intent="MessageIntent.Error" 
                                      Style="margin-top: 5px;">
                        <ul style="margin: 0; padding-left: 20px;">
                            @foreach (var error in row.Errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </FluentMessageBar>
                }
            </div>
        }
    </ChildContent>

    <!-- FOOTER: Submit Button -->
    <FooterContent>
        <FluentButton Appearance="Appearance.Accent" 
                      OnClick="HandleSubmitAsync"
                      Disabled="@_isSubmitting">
            Submit All (@_rows.Count rows)
        </FluentButton>
    </FooterContent>

</DataContainer>

<LoadingOverlay IsVisible="@_isSubmitting" Message="Submitting changes..." />


@code {
    private string _commonDateType = nameof(DateType.Confirmed);
    private List<ReceiptDateRowModel> _rows = new();
    private List<string> _globalErrors = new();
    private bool _isSubmitting = false;

    protected override void OnInitialized()
    {
        AddNewRow();
        StateHasChanged();

    }

    private void AddNewRow()
    {
        _rows.Add(new ReceiptDateRowModel
        {
            ReceiptDate = DateTime.Now.AddDays(1),
            LineNumber = 10,
            Sequence = 1
        });

        StateHasChanged();
    }

    private void RemoveRow(int index)
    {
        if (_rows.Count > 1)
        {
            _rows.RemoveAt(index);
        }
    }

    private async Task ClearAllAsync()
    {
        var dialog = await DialogService.ShowConfirmationAsync(
            "Are you sure you want to clear all rows?",
            "Clear All",
            "Yes",
            "No");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _rows.Clear();
            _globalErrors.Clear();
            AddNewRow(); // Dodaj jeden pusty wiersz
        }
    }

    private async Task HandleSubmitAsync()
    {
        _globalErrors.Clear();

        // Czyść błędy ze wszystkich wierszy
        foreach (var row in _rows)
        {
            row.Errors.Clear();
        }

        _isSubmitting = true;

        try
        {
            var items = _rows.Select(row => new ReceiptDateUpdateItem(
                PurchaseOrderNumber: row.PurchaseOrderNumber,
                LineNumber: row.LineNumber,
                Sequence: row.Sequence,
                ReceiptDate: row.ReceiptDate
            )).ToList();

            var command = new UpdateReceiptDateBatchCommand(
                Items: items,
                DateType: Enum.Parse<DateType>(_commonDateType)
            );

            var result = await Mediator.SendCommandAsync<UpdateReceiptDateBatchCommand, Result>(command);

            if (result.IsSuccess)
            {
                ToastService.ShowSuccess($"Successfully submitted {_rows.Count} rows!");

                // Wyczyść formularz
                _rows.Clear();
                AddNewRow();
            }
            else
            {
                // Parsuj błędy: globalne vs per-row
                ParseErrors(result.Errors);
            }
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void ParseErrors(IReadOnlyCollection<Error> errors)
    {
        foreach (var error in errors)
        {
            // Regex: "Row[0].PurchaseOrderNumber jest wymagany"
            // Wyciągamy: rowIndex=0, errorMessage="PurchaseOrderNumber jest wymagany"
            var match = System.Text.RegularExpressions.Regex.Match(
                error.Description,
                @"^Row\[(\d+)\]\.(.+)$");

            if (match.Success)
            {
                // Błąd per-row
                int rowIndex = int.Parse(match.Groups[1].Value);
                string errorMessage = match.Groups[2].Value; // ← BEZ "Row[0]."

                if (rowIndex < _rows.Count)
                {
                    _rows[rowIndex].Errors.Add(errorMessage);
                }
            }
            else
            {
                // Błąd globalny
                _globalErrors.Add(error.Description);
            }
        }
    }

    public class ReceiptDateRowModel
    {
        public string PurchaseOrderNumber { get; set; } = string.Empty;
        public int LineNumber { get; set; }
        public int Sequence { get; set; }
        public DateTime? ReceiptDate { get; set; }
        public List<string> Errors { get; set; } = new();
    }
}