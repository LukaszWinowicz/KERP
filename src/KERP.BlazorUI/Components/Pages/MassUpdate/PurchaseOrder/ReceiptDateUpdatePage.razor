@page "/mass-update/purchase-order/receipt-date"
@using KERP.Application.Common.Abstractions.CQRS
@using KERP.Application.Common.Abstractions.MassUpdate.PurchaseOrder.ReceiptDate
@using KERP.BlazorUI.Components.Shared
@using KERP.Domain.Aggregates.MassUpdate.PurchaseOrder
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

@inject IMediator Mediator
@inject IToastService ToastService

<PageTitle>Mass Update - Receipt Date</PageTitle>

<h3>Update Purchase Order Receipt Date</h3>
<p>Enter the details below to submit a receipt date change request.</p>

<FluentCard Style="max-width: 600px; margin-top: 20px;">
    <EditForm Model="@Model" OnValidSubmit="HandleValidSubmitAsync" FormName="receipt-date-update-form">
        <DataAnnotationsValidator />
        
        <FluentStack Orientation="Orientation.Vertical" Gap="20px">
            
            <FluentTextField @bind-Value="Model.PurchaseOrderNumber" Label="Purchase Order Number" Placeholder="Enter 9-digit PO Number" Required="true" />
            
            <FluentNumberField @bind-Value="Model.LineNumber" Label="Line Number" Min="1" />

            <FluentNumberField @bind-Value="Model.Sequence" Label="Sequence" Min="1" />

            <FluentDatePicker @bind-Value="Model.ReceiptDate" Label="New Receipt Date" Required="true" />

            <FluentSelect TOption="string" @bind-Value="Model.DateType" Label="Date Type">
                <FluentOption Value="@(nameof(DateType.Confirmed))">Confirmed</FluentOption>
                <FluentOption Value="@(nameof(DateType.Changed))">Changed</FluentOption>
            </FluentSelect>
            
            <!-- Nowy blok do wyświetlania błędów z serwera -->
            @if (_serverErrors.Any())
            {
                <FluentMessageBar Intent="MessageIntent.Error" Title="Błędy operacji">
                    <ul>
                        @foreach (var error in _serverErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </FluentMessageBar>
            }

            <FluentButton Type="ButtonType.Submit"
                          Appearance="Appearance.Accent"
                          Disabled="@_isSubmitting">
                Submit Change
            </FluentButton>

        </FluentStack>

        <ValidationSummary style="margin-top: 20px;" />

    </EditForm>
</FluentCard>

<LoadingOverlay IsVisible="@_isSubmitting" 
                Message="Submitting changes..." 
                SpinnerSize="128px" />

@code {
    private ReceiptDateUpdateModel Model { get; set; } = new();

    // Nowa lista do przechowywania błędów zwróconych przez backend
    private List<string> _serverErrors = new();
    private bool _isSubmitting = false;

    protected override void OnInitialized()
    {
        // Ustawienie wartości domyślnych dla formularza
        Model.ReceiptDate = DateTime.Now.AddDays(1);
        Model.DateType = nameof(DateType.Confirmed);
    }

    private async Task HandleValidSubmitAsync()
    {
        // Czyścimy listę błędów przed każdą próbą wysłania
        _serverErrors.Clear();
        _isSubmitting = true;

        try
        {
            await Task.Delay(5000);

            var command = new UpdateReceiptDateCommand(
                Model.PurchaseOrderNumber,
                Model.LineNumber,
                Model.Sequence,
                Model.ReceiptDate.Value, // Model i walidacja zapewniają, że data nie jest null
                Enum.Parse<DateType>(Model.DateType)
        );

            // Wysyłamy command przez Mediator - cała logika walidacji i zapisu dzieje się na backendzie
            var result = await Mediator.SendCommandAsync<UpdateReceiptDateCommand, KERP.Application.Common.Models.Result>(command);

            if (result.IsSuccess)
            {
                // Powiadomienie o sukcesie pozostaje jako "toast"
                ToastService.ShowSuccess("Receipt date update submitted successfully!");

                // Resetujemy model formularza, aby umożliwić dodanie kolejnego wpisu
                Model = new ReceiptDateUpdateModel
                {
                    ReceiptDate = DateTime.Now.AddDays(1),
                    DateType = nameof(DateType.Confirmed)
                };
            }
            else
            {
                // Zamiast "toasta", wypełniamy listę błędów, która jest wyświetlana na stronie
                _serverErrors = result.Errors.Select(e => e.Description).ToList();
            }
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    /// <summary>
    /// Klasa modelu używana do bindowania danych w formularzu.
    /// Zawiera atrybuty walidacji, które są wykorzystywane przez EditForm.
    /// </summary>
    public class ReceiptDateUpdateModel
    {
        [Required(ErrorMessage = "Purchase Order Number is required.")]
        [StringLength(9, MinimumLength = 9, ErrorMessage = "Purchase Order Number must be exactly 9 characters long.")]
        public string PurchaseOrderNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Line Number is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "Line Number must be at least 1.")]
        public int LineNumber { get; set; } = 1;

        [Required(ErrorMessage = "Sequence is required.")]
        [Range(1, int.MaxValue, ErrorMessage = "Sequence must be at least 1.")]
        public int Sequence { get; set; } = 1;

        [Required(ErrorMessage = "Receipt Date is required.")]
        public DateTime? ReceiptDate { get; set; }

        [Required(ErrorMessage = "Date Type is required.")]
        public string? DateType { get; set; }
    }
}